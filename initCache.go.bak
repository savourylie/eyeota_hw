func initCache(filename string) lookupCacheCK {
	raw, err := ioutil.ReadFile(filename)
	lc := lookupCacheCK{}

	// Initialize maps
	lc.data = make(map[string]map[string]map[string][]string)

	lc.orgJSON = string(raw)
	parser, err := gojq.NewStringQuery(lc.orgJSON)

	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}

	tree, err := parser.Query(".")
	lc.dataRaw = tree.([]interface{})

	// Top level loop
	for i := range lc.dataRaw {
		// lc.orgID = append(lc.orgID, i)
		orgMapNA, _ := parser.Query("[" + strconv.Itoa(i) + "]")
		orgMap := orgMapNA.(map[string]interface{})

		// OrgKey level loop
		for org := range orgMap {
			pNameInd := orgMap[org].([]interface{})
			for j := range pNameInd {
				pNameMap := pNameInd[j].(map[string]interface{})
				// paramName level loop
				for pName := range pNameMap {
					pValArray := pNameMap[pName].([]interface{})
					for k := range pValArray {
						pValMap := pValArray[k].(map[string]interface{})
						// paramVal level loop
						for pVal := range pValMap {
							// fmt.Println(pVal, seg)
							if strings.Contains(pVal, "\n") {
								pValSlice := strings.Split(pVal, "\n")

								segMap := pValMap[pVal].(map[string]interface{})
								// Segment level loop
								for _, segValNA := range segMap {
									segVal := segValNA.(string)

									if lc.data[org] == nil {
										lc.data[org] = make(map[string]map[string][]string)
									}

									if lc.data[org][pName] == nil {
										lc.data[org][pName] = make(map[string][]string)
									}

									for _, pv := range pValSlice {
										lc.data[org][pName][pv] = append(lc.data[org][pName][pv], segVal)
									}

								}
							} else {
								segMap := pValMap[pVal].(map[string]interface{})
								// Segment level loop
								for _, segValNA := range segMap {
									segVal := segValNA.(string)

									if lc.data[org] == nil {
										lc.data[org] = make(map[string]map[string][]string)
									}

									if lc.data[org][pName] == nil {
										lc.data[org][pName] = make(map[string][]string)
									}
									lc.data[org][pName][pVal] = append(lc.data[org][pName][pVal], segVal)
								}
							}
						}
					}
				}
			}
		}
	}
	return lc
}